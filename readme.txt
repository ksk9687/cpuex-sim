*アセンブラの使い方
起動方法は java asm.Assembler
入出力はリダイレクトで行う
-encoding hoge でエンコーディングを指定できる(デフォルトはUTF-8)
-vhdl でVHDL向けに二進数出力する
-cpu で対象CPUを指定する(デフォルトは最新のやつ)
sample\macro.sを最初に張り付けないとあまり幸せになれない

*アセンブリ言語の仕様
基本的に機械語と1対1対応
機械語の通りに命令とオペランドを空白区切りで並べて書く(マクロにより、他の形式で書くことも可能)
レジスタの前には$を付ける
ラベルは:を後ろにつける (空白をはさんでも大丈夫)
ラベル名は、a-z_.くらいで予約語とかぶらないように付けるのが安全
jmpやloadなどの即値としてラベルを指定することができる
数値の指定方法は、10進(そのまま)、16進(0xを前に付ける)、2進(0bを前に付ける)に対応
大文字と小文字は区別されない
#から後ろがコメントになる
.define x y で以降のxが全てyに置換される(例: .define $ra $i15 ,　注: xは単項でないといけない)
.define { exp1 } { exp2 } で以降の式exp1がexp2として解釈される(例: .define { clear %Reg } { li %1 0 } )
.defineの使い方はsample\macro.sを参照
.skip x でxワード分の領域を確保(初期値0)
.int でint値埋め込み
.float でfloat値埋め込み
%pcでpcの値に、 %{ exp } でexpを計算した値に、それぞれ置き換わる (例: li $ra %{ %pc + 2 } )

*シミュレータの使い方
起動方法は java sim.Simulator バイナリファイル
入出力はリダイレクトで行う
-cpu で対象CPUを指定する(デフォルトは最新のやつ)
バイナリ実行機能しかまだないので、ステップ実行やレジスタ＆メモリの中身が見たかったらEclipse上でデバッグ実行してください
